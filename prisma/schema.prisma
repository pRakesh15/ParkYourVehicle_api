// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid          String        @id
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String?
  image        String?
  Cradntials   Credentials?
  AuthProvider AuthProvider?
  Admin        Admin?
  Manager      Manager?
  Valet        Valet?
  Customer     Customer?
}

model Valet {
  uid String @id

  User              User              @relation(fields: [uid], references: [uid])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  displayName       String?
  image             String?
  licenceID         String            @default("")
  companyId         Int?
  Company           Company?          @relation(fields: [companyId], references: [id])
  BookingTimeline   BookingTimeline[]
  PickupAssignments ValetAssignment[] @relation("PickupValet")
  ReturnAssignments ValetAssignment[] @relation("ReturnValet")

  @@unique([companyId, uid])
}

model Company {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String?
  description String?

  Garages  Garages[]
  Managers Manager[]
  Valets   Valet[]
}

model Garages {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  displayName  String?
  description  String?
  image        String[]
  companyId    Int
  Company      Company?      @relation(fields: [companyId], references: [id])
  Address      Address?
  Verification Verification?
  Reviews      Review[]
  Slots        Slots[]
}

model Slots {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayName  String?
  pricePerHour Float

  length Int?
  width  Int?
  height Int?

  type SlotType @default(CAR)

  garageId Int
  Garage   Garages @relation(fields: [garageId], references: [id])

  Bookings Bookings[]
}

model Bookings {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  pricePerHour  Float?
  totalPrice    Float?
  startTime     DateTime
  endTime       DateTime
  vehicleNumber String
  phoneNumber   String?
  passcode      String?
  status        BookingStatus @default(BOOKED)

  slotId Int
  Slot   Slots @relation(fields: [slotId], references: [id])

  customerId String
  Customer   Customer @relation(fields: [customerId], references: [uid])

  ValetAssignment ValetAssignment?
  BookingTimeline BookingTimeline[]

  @@index([startTime, endTime])
}

model ValetAssignment {
  bookingId Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pickupLat Float?
  pickupLng Float?
  returnLat Float?
  returnLng Float?

  pickupValetId String?
  returnValetId String?
  PickupValet   Valet?   @relation("PickupValet", fields: [pickupValetId], references: [uid])
  ReturnValet   Valet?   @relation("ReturnValet", fields: [returnValetId], references: [uid])
  Booking       Bookings @relation(fields: [bookingId], references: [id])
}

model BookingTimeline {
  id Int @id @default(autoincrement())

  timestamp DateTime      @default(now())
  status    BookingStatus

  bookingId Int
  Booking   Bookings @relation(fields: [bookingId], references: [id])

  valetId String?
  Valet   Valet?  @relation(fields: [valetId], references: [uid])

  managerId String?
  Manager   Manager? @relation(fields: [managerId], references: [uid])

  @@index([bookingId])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating  Int     @default(0)
  comment String?

  customerId String
  Customer   Customer @relation(fields: [customerId], references: [uid])

  garageId Int
  Garage   Garages @relation(fields: [garageId], references: [id])
}

model Verification {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verified Boolean @default(false)

  adminId  String
  garageId Int     @id
  Admin    Admin   @relation(fields: [adminId], references: [uid])
  Garage   Garages @relation(fields: [garageId], references: [id])
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String
  lat       Float
  lng       Float

  garageId Int @unique

  Garage Garages @relation(fields: [garageId], references: [id])
}

model Manager {
  uid String @id

  User        User     @relation(fields: [uid], references: [uid])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String?

  companyId       Int?              @unique
  Company         Company?          @relation(fields: [companyId], references: [id])
  BookingTimeline BookingTimeline[]
}

model Customer {
  uid String @id

  User        User     @relation(fields: [uid], references: [uid])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String?

  Bookings Bookings[]
  Reviews  Review[]
}

model AuthProvider {
  uid  String           @id
  type AuthProviderType
  User User             @relation(fields: [uid], references: [uid])
}

model Credentials {
  uid         String   @id
  email       String   @unique
  User        User     @relation(fields: [uid], references: [uid])
  passwordHas String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Admin {
  uid          String         @id
  User         User           @relation(fields: [uid], references: [uid])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Verification Verification[]
}

enum SlotType {
  CAR
  HEAVY
  BIKE
  BICYCLE
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

enum BookingStatus {
  BOOKED
  VALET_ASSIGNED_FOR_CHECK_IN
  VALET_PICKED_UP
  CHECKED_IN
  VALET_ASSIGNED_FOR_CHECK_OUT
  CHECKED_OUT
  VALET_RETURNED
}
